apiVersion: tekton.dev/v1
kind: Task
metadata:

  name: kustomize-update-image-tag

spec:
  description: |
    Updates an image tag in a Kustomize kustomization.yaml file,
    commits, and pushes the change back to the Git repo.
  params:
    - default: main
      description: |
        Revision to checkout, an branch, tag, sha, ref, etc...
      name: REVISION
      type: string
    - default: ''
      description: |
        Repository `refspec` to fetch before checking out the revision.
      name: REFSPEC
      type: string
    - default: /home/git
      description: |
        Absolute path to the Git user home directory.
      name: USER_HOME
      type: string
    - default: mukesh1327
      description: |
        user name.
      name: GIT_USER_NAME
      type: string
    - default: mugicoder13@gmail.com
      description: |
        user email.
      name: GIT_USER_EMAIL
      type: string
    - description: Full image name (e.g. quay.io/org/app)
      name: image-name
      type: string
    - description: New image tag to set
      name: new-tag
      type: string
    - default: overlays/dev
      description: Path to the kustomization.yaml file directory
      name: kustomize-dir
      type: string
    - default: 'chore: update image tag via Tekton'
      name: commit-message
      type: string
    - default: 'true'
      description: |
        Sets the global `http.sslVerify` value, `false` is not advised unless
        you trust the remote repository.
      name: SSL_VERIFY
      type: string
  stepTemplate:
    computeResources: {}
    env:
      - name: WORKSPACES_BASIC_AUTH_BOUND
        value: $(workspaces.basic-auth.bound)
      - name: WORKSPACES_BASIC_AUTH_PATH
        value: $(workspaces.basic-auth.path)
      - name: PARAMS_USER_HOME
        value: $(params.USER_HOME)
      - name: PARAMS_GIT_USER_NAME
        value: $(params.GIT_USER_NAME)
      - name: PARAMS_GIT_USER_EMAIL
        value: $(params.GIT_USER_EMAIL)
      - name: PARAMS_REVISION
        value: $(params.REVISION)
      - name: PARAMS_REFSPEC
        value: $(params.REFSPEC)
      - name: PARAMS_SSL_VERIFY
        value: $(params.SSL_VERIFY)
  steps:
    - computeResources: {}
      image: 'quay.io/mukeshs1306/ubi9-kustomize:latest'
      name: update-image
      script: |
        #!/bin/bash
        set -e

        pwd

        cd $(params.kustomize-dir)

        pwd

        ls -la

        # Update image tag
        kustomize edit set image $(params.image-name)=$(params.image-name):$(params.new-tag)

        # New updated image is
        echo "$(params.image-name)=$(params.image-name):$(params.new-tag)"
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
      workingDir: $(workspaces.source.path)
    - computeResources: {}
      env:
        - name: SOURCE_DIR
          value: $(workspaces.source.path)
      image: 'registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel9@sha256:8f0494341244a75546a4b80b065702be04e6d200421aa4e7ec90385c9dabc6ab'
      name: commit-and-push
      script: |
        #!/bin/bash

        set -eux

        export WORKSPACES_BASIC_AUTH_BOUND="${WORKSPACES_BASIC_AUTH_BOUND:-}"
        export WORKSPACES_BASIC_AUTH_PATH="${WORKSPACES_BASIC_AUTH_PATH:-}"
        export PARAMS_GIT_USER_EMAIL="${PARAMS_GIT_USER_EMAIL:-}"
        export PARAMS_GIT_USER_NAME="${PARAMS_GIT_USER_NAME:-}"
        export PARAMS_REVISION="${PARAMS_REVISION:-}"
        export PARAMS_REFSPEC="${PARAMS_REFSPEC:-}"
        export PARAMS_SSL_VERIFY="${PARAMS_SSL_VERIFY:-}"

        phase() {
            echo "---> Phase: ${@}..."
        }

        copy_or_fail() {
            local _mode="${1}"
            local _src="${2}"
            local _dst="${3}"

            if [[ ! -f "${_src}" && ! -d "${_src}" ]]; then
                fail "Source file/directory is not found at '${_src}'"
            fi

            if [[ -d "${_src}" ]]; then
                cp -Rv ${_src} ${_dst}
                chmod -v ${_mode} ${_dst}
            else
                install --verbose --mode=${_mode} ${_src} ${_dst}
            fi
        }

        cd $(workspaces.source.path)

        echo "Current directory: $(pwd)"

        ls -la

        echo "Git status before commit:"
        git status || true

        # Fix safe.directory issue (Tekton runs as root or arbitrary UID)
        git config --global --add safe.directory $(pwd)


        if [[ "${WORKSPACES_BASIC_AUTH_BOUND}" == "true" ]]; then
            phase "Configuring Git authentication with 'basic-auth' Workspace files"
            for f in .git-credentials .gitconfig; do
                src="${WORKSPACES_BASIC_AUTH_PATH}/${f}"
                phase "Copying '${src}' to '${PARAMS_USER_HOME}'"
                copy_or_fail 400 ${src} "${PARAMS_USER_HOME}/"
            done
        fi

        if [ -n "${PARAMS_GIT_USER_EMAIL}" ]; then
            phase "Setting global email for git ${PARAMS_GIT_USER_EMAIL}"
            git config --global user.email "${PARAMS_GIT_USER_EMAIL}"
        fi

        if [ -n "${PARAMS_GIT_USER_NAME}" ]; then
            phase "Setting global username for git ${PARAMS_GIT_USER_NAME}"
            git config --global user.name "${PARAMS_GIT_USER_NAME}"
        fi

        # Verify .git is valid
        if [ ! -d ".git" ]; then
          echo "Error: .git directory missing!"
          exit 1
        fi

        git config --global http.sslverify ${PARAMS_SSL_VERIFY}

        git remote -v

        git checkout -b ${PARAMS_REVISION}

        git add $(params.kustomize-dir)/kustomization.yaml || true

        if git diff --cached --quiet; then
          echo "No changes to commit."
        else
          git commit -m "$(params.commit-message): $(params.new-tag)"
          echo "Pushing changes..."

          git push origin ${PARAMS_REVISION}
        fi
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
      volumeMounts:
        - mountPath: $(params.USER_HOME)
          name: user-home
      workingDir: $(workspaces.source.path)
  volumes:
    - emptyDir: {}
      name: user-home
  workspaces:
    - description: The workspace containing the cloned Git repo
      name: source
    - description: |
        A Workspace containing a `.gitconfig` and `.git-credentials` files.
        These will be copied to the user's home before Git commands run. All
        other files in this Workspace are ignored. It is strongly recommended to
        use `ssh-directory` over `basic-auth` whenever possible, and to bind a
        Secret to this Workspace over other volume types.
      name: basic-auth
      optional: true
